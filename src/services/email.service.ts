// src/services/email.service.ts
/*
import nodemailer from 'nodemailer';
import moment from 'moment-timezone';

export class EmailService {
  static sendMail(mailOptions: { from: string | undefined; to: string; subject: string; html: string; }) {
      throw new Error('Method not implemented.');
  }
  static sendPremiumExpirationReminder(email: string, arg1: { userName: string; endDate: Date | undefined; daysLeft: number; }) {
      throw new Error('Method not implemented.');
  }
  static sendPremiumExpiredEmail(email: string, arg1: { userName: string; expiredDate: Date | undefined; }) {
      throw new Error('Method not implemented.');
  }
  private static transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  });

  private static formatDate(date: Date): string {
    return moment(date)
      .tz('Asia/Ho_Chi_Minh')
      .format('HH:mm - DD/MM/YYYY');
  }

  static async sendPaymentSuccessEmail(userEmail: string, data: {
    orderCode: string;
    amount: number;
    paymentMethod?: string;
    startDate: Date;
    endDate: Date;
    userName: string;
  }) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Thanh to√°n th√†nh c√¥ng - LearnUp',
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="color: #2563eb;">LearnUp</h1>
          </div>

          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px;">
            <h2 style="color: #059669;">X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng</h2>
            
            <p>Xin ch√†o ${data.userName},</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† n√¢ng c·∫•p t√†i kho·∫£n Premium t·∫°i LearnUp!</p>
            
            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Chi ti·∫øt ƒë∆°n h√†ng</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üîπ M√£ ƒë∆°n h√†ng: <strong>#${data.orderCode}</strong></li>
                <li>üîπ S·ªë ti·ªÅn: <strong>${data.amount.toLocaleString('vi-VN')} VNƒê</strong></li>
                ${data.paymentMethod ? `<li>üîπ Ph∆∞∆°ng th·ª©c: <strong>${data.paymentMethod}</strong></li>` : ''}
              </ul>
            </div>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Th√¥ng tin g√≥i Premium</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: <strong>${this.formatDate(data.startDate)}</strong></li>
                <li>üìÖ Th·ªùi gian k·∫øt th√∫c: <strong>${this.formatDate(data.endDate)}</strong></li>
                <li>‚è≥ Th·ªùi h·∫°n: <strong>30 ng√†y</strong></li>
              </ul>
            </div>

            <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h4 style="color: #92400e; margin-top: 0;">ƒê·∫∑c quy·ªÅn Premium c·ªßa b·∫°n:</h4>
              <ul style="color: #92400e;">
                <li>‚ú® Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n t·∫•t c·∫£ kh√≥a h·ªçc</li>
                <li>‚ú® Xem video offline</li>
                <li>‚ú® T·∫£i t√†i li·ªáu h·ªçc t·∫≠p</li>
                <li>‚ú® H·ªó tr·ª£ ∆∞u ti√™n</li>
                <li>‚ú® C·∫≠p nh·∫≠t n·ªôi dung m·ªõi nh·∫•t</li>
              </ul>
            </div>

            <div style="background-color: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="color: #991b1b; margin: 0;">
                <strong>L∆∞u √Ω quan tr·ªçng:</strong><br>
                ‚Ä¢ G√≥i Premium s·∫Ω h·∫øt h·∫°n v√†o: <strong>${this.formatDate(data.endDate)}</strong><br>
                ‚Ä¢ Ch√∫ng t√¥i s·∫Ω g·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc khi h·∫øt h·∫°n 7 ng√†y<br>
                ‚Ä¢ B·∫°n c√≥ th·ªÉ gia h·∫°n g√≥i Premium tr∆∞·ªõc khi h·∫øt h·∫°n
              </p>
            </div>

            <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:</p>
            <ul style="list-style: none; padding: 0;">
              <li>üìß Email: support@learnup.work</li>
              <li>üìû Hotline: 0938982776</li>
            </ul>

            <p style="text-align: center; color: #6b7280;">
              Tr√¢n tr·ªçng,<br>
              <strong>LearnUp Team</strong>
            </p>
          </div>
        </div>
      `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      console.log('Payment success email sent');
    } catch (error) {
      console.error('Send payment success email error:', error);
    }
  }

  static async sendPaymentFailedEmail(userEmail: string, data: {
    orderCode: string;
    reason: string;
    userName: string;
    cancelTime: Date;
  }) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Th√¥ng b√°o thanh to√°n kh√¥ng th√†nh c√¥ng - LearnUp',
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="color: #2563eb;">LearnUp</h1>
          </div>

          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px;">
            <h2 style="color: #dc2626;">Th√¥ng b√°o thanh to√°n kh√¥ng th√†nh c√¥ng</h2>
            
            <p>Xin ch√†o ${data.userName},</p>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Chi ti·∫øt ƒë∆°n h√†ng</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üîπ M√£ ƒë∆°n h√†ng: <strong>#${data.orderCode}</strong></li>
                <li>üîπ Th·ªùi gian: <strong>${this.formatDate(data.cancelTime)}</strong></li>
                <li>üîπ L√Ω do: <strong>${data.reason}</strong></li>
              </ul>
            </div>

            <div style="background-color: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="color: #991b1b; margin: 0;">
                B·∫°n c√≥ th·ªÉ th·ª≠ thanh to√°n l·∫°i b·∫±ng c√°ch:
                <ol style="margin-top: 10px;">
                  <li>ƒêƒÉng nh·∫≠p v√†o LearnUp</li>
                  <li>V√†o ph·∫ßn n√¢ng c·∫•p Premium</li>
                  <li>Th·ª±c hi·ªán thanh to√°n m·ªõi</li>
                </ol>
              </p>
            </div>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FE_URL}/premium" 
                 style="background-color: #2563eb; color: white; padding: 12px 24px; 
                        text-decoration: none; border-radius: 6px;">
                N√¢ng c·∫•p Premium
              </a>
            </div>

            <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:</p>
            <ul style="list-style: none; padding: 0;">
              <li>üìß Email: support@learnup.work</li>
              <li>üìû Hotline: 0938982776</li>
            </ul>

            <p style="text-align: center; color: #6b7280;">
              Tr√¢n tr·ªçng,<br>
              <strong>LearnUp Team</strong>
            </p>
          </div>
        </div>
      `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      console.log('Payment failed email sent');
    } catch (error) {
      console.error('Send payment failed email error:', error);
    }
  }
}
  */

// src/services/email.service.ts

import nodemailer from 'nodemailer';
import moment from 'moment-timezone';

export class EmailService {
  // Kh·ªüi t·∫°o transporter cho nodemailer
  private static transporter = nodemailer.createTransport({
    service: 'gmail', // Ho·∫∑c s·ª≠ d·ª•ng SMTP server kh√°c n·∫øu kh√¥ng d√πng Gmail
    auth: {
      user: process.env.EMAIL_USER, // ƒê·ªãa ch·ªâ email c·ªßa b·∫°n
      pass: process.env.EMAIL_PASSWORD // M·∫≠t kh·∫©u ·ª©ng d·ª•ng ho·∫∑c m·∫≠t kh·∫©u email
    }
  });

  // Ph∆∞∆°ng th·ª©c ƒë·ªãnh d·∫°ng ng√†y gi·ªù theo m√∫i gi·ªù Vi·ªát Nam
  private static formatDate(date: Date): string {
    return moment(date)
      .tz('Asia/Ho_Chi_Minh')
      .format('HH:mm - DD/MM/YYYY');
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email chung
  static async sendMail(mailOptions: nodemailer.SendMailOptions) {
    try {
      await this.transporter.sendMail(mailOptions);
      console.log('Email sent:', mailOptions.to);
    } catch (error) {
      console.error('Error sending email:', error);
    }
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email nh·∫Øc nh·ªü s·∫Øp h·∫øt h·∫°n Premium
  static async sendPremiumExpirationReminder(userEmail: string, data: {
    userName: string;
    endDate: Date | undefined; // Ch·∫•p nh·∫≠n Date ho·∫∑c undefined
    daysLeft: number;
  }) {
    if (!data.endDate) {
      console.error('Cannot send expiration reminder email. endDate is undefined.');
      return;
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Nh·∫Øc nh·ªü s·∫Øp h·∫øt h·∫°n g√≥i Premium - LearnUp',
      html: `
        <div>
          <p>Xin ch√†o ${data.userName},</p>
          <p>G√≥i Premium c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n v√†o ng√†y <strong>${this.formatDate(data.endDate)}</strong>, c√≤n ${data.daysLeft} ng√†y n·ªØa.</p>
          <p>Vui l√≤ng gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng c√°c d·ªãch v·ª• Premium c·ªßa ch√∫ng t√¥i.</p>
          <p>Tr√¢n tr·ªçng,<br/>LearnUp Team</p>
        </div>
      `
    };

    try {
      await this.sendMail(mailOptions);
      console.log('Premium expiration reminder email sent to', userEmail);
    } catch (error) {
      console.error('Error sending premium expiration reminder email:', error);
    }
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email th√¥ng b√°o Premium ƒë√£ h·∫øt h·∫°n
  static async sendPremiumExpiredEmail(userEmail: string, data: {
    userName: string;
    expiredDate: Date | undefined; // Ch·∫•p nh·∫≠n Date ho·∫∑c undefined
  }) {
    if (!data.expiredDate) {
      console.error('Cannot send expired email. expiredDate is undefined.');
      return;
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Th√¥ng b√°o h·∫øt h·∫°n g√≥i Premium - LearnUp',
      html: `
        <div>
          <p>Xin ch√†o ${data.userName},</p>
          <p>G√≥i Premium c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n v√†o ng√†y <strong>${this.formatDate(data.expiredDate)}</strong>.</p>
          <p>ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng c√°c d·ªãch v·ª• Premium, vui l√≤ng gia h·∫°n g√≥i c·ªßa b·∫°n.</p>
          <p>Tr√¢n tr·ªçng,<br/>LearnUp Team</p>
        </div>
      `
    };

    try {
      await this.sendMail(mailOptions);
      console.log('Premium expired email sent to', userEmail);
    } catch (error) {
      console.error('Error sending premium expired email:', error);
    }
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng
  static async sendPaymentSuccessEmail(userEmail: string, data: {
    orderCode: string;
    amount: number;
    paymentMethod?: string;
    startDate: Date;
    endDate: Date;
    userName: string;
  }) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Thanh to√°n th√†nh c√¥ng - LearnUp',
      html: `
        <!-- N·ªôi dung email th√†nh c√¥ng (gi·ªØ nguy√™n nh∆∞ b·∫°n ƒë√£ c√≥) -->
      `
    };

    try {
      await this.sendMail(mailOptions);
      console.log('Payment success email sent');
    } catch (error) {
      console.error('Send payment success email error:', error);
    }
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email th√¥ng b√°o thanh to√°n th·∫•t b·∫°i
  static async sendPaymentFailedEmail(userEmail: string, data: {
    orderCode: string;
    reason: string;
    userName: string;
    cancelTime: Date;
  }) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: 'Th√¥ng b√°o thanh to√°n kh√¥ng th√†nh c√¥ng - LearnUp',
      html: `
        <!-- N·ªôi dung email th·∫•t b·∫°i (gi·ªØ nguy√™n nh∆∞ b·∫°n ƒë√£ c√≥) -->
      `
    };

    try {
      await this.sendMail(mailOptions);
      console.log('Payment failed email sent');
    } catch (error) {
      console.error('Send payment failed email error:', error);
    }
  }
}
