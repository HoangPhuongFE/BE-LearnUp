"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
// src/services/email.service.ts
const nodemailer_1 = __importDefault(require("nodemailer"));
const moment_timezone_1 = __importDefault(require("moment-timezone"));
class EmailService {
    static sendMail(mailOptions) {
        throw new Error('Method not implemented.');
    }
    static sendPremiumExpirationReminder(email, arg1) {
        throw new Error('Method not implemented.');
    }
    static sendPremiumExpiredEmail(email, arg1) {
        throw new Error('Method not implemented.');
    }
    static formatDate(date) {
        return (0, moment_timezone_1.default)(date)
            .tz('Asia/Ho_Chi_Minh')
            .format('HH:mm - DD/MM/YYYY');
    }
    static sendPaymentSuccessEmail(userEmail, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: userEmail,
                subject: 'Thanh to√°n th√†nh c√¥ng - LearnUp',
                html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="color: #2563eb;">LearnUp</h1>
          </div>

          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px;">
            <h2 style="color: #059669;">X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng</h2>
            
            <p>Xin ch√†o ${data.userName},</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† n√¢ng c·∫•p t√†i kho·∫£n Premium t·∫°i LearnUp!</p>
            
            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Chi ti·∫øt ƒë∆°n h√†ng</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üîπ M√£ ƒë∆°n h√†ng: <strong>#${data.orderCode}</strong></li>
                <li>üîπ S·ªë ti·ªÅn: <strong>${data.amount.toLocaleString('vi-VN')} VNƒê</strong></li>
                ${data.paymentMethod ? `<li>üîπ Ph∆∞∆°ng th·ª©c: <strong>${data.paymentMethod}</strong></li>` : ''}
              </ul>
            </div>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Th√¥ng tin g√≥i Premium</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: <strong>${this.formatDate(data.startDate)}</strong></li>
                <li>üìÖ Th·ªùi gian k·∫øt th√∫c: <strong>${this.formatDate(data.endDate)}</strong></li>
                <li>‚è≥ Th·ªùi h·∫°n: <strong>30 ng√†y</strong></li>
              </ul>
            </div>

            <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h4 style="color: #92400e; margin-top: 0;">ƒê·∫∑c quy·ªÅn Premium c·ªßa b·∫°n:</h4>
              <ul style="color: #92400e;">
                <li>‚ú® Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n t·∫•t c·∫£ kh√≥a h·ªçc</li>
                <li>‚ú® Xem video offline</li>
                <li>‚ú® T·∫£i t√†i li·ªáu h·ªçc t·∫≠p</li>
                <li>‚ú® H·ªó tr·ª£ ∆∞u ti√™n</li>
                <li>‚ú® C·∫≠p nh·∫≠t n·ªôi dung m·ªõi nh·∫•t</li>
              </ul>
            </div>

            <div style="background-color: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="color: #991b1b; margin: 0;">
                <strong>L∆∞u √Ω quan tr·ªçng:</strong><br>
                ‚Ä¢ G√≥i Premium s·∫Ω h·∫øt h·∫°n v√†o: <strong>${this.formatDate(data.endDate)}</strong><br>
                ‚Ä¢ Ch√∫ng t√¥i s·∫Ω g·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc khi h·∫øt h·∫°n 7 ng√†y<br>
                ‚Ä¢ B·∫°n c√≥ th·ªÉ gia h·∫°n g√≥i Premium tr∆∞·ªõc khi h·∫øt h·∫°n
              </p>
            </div>

            <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:</p>
            <ul style="list-style: none; padding: 0;">
              <li>üìß Email: support@learnup.work</li>
              <li>üìû Hotline: 0938982776</li>
            </ul>

            <p style="text-align: center; color: #6b7280;">
              Tr√¢n tr·ªçng,<br>
              <strong>LearnUp Team</strong>
            </p>
          </div>
        </div>
      `
            };
            try {
                yield this.transporter.sendMail(mailOptions);
                console.log('Payment success email sent');
            }
            catch (error) {
                console.error('Send payment success email error:', error);
            }
        });
    }
    static sendPaymentFailedEmail(userEmail, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: userEmail,
                subject: 'Th√¥ng b√°o thanh to√°n kh√¥ng th√†nh c√¥ng - LearnUp',
                html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="color: #2563eb;">LearnUp</h1>
          </div>

          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px;">
            <h2 style="color: #dc2626;">Th√¥ng b√°o thanh to√°n kh√¥ng th√†nh c√¥ng</h2>
            
            <p>Xin ch√†o ${data.userName},</p>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #4b5563;">Chi ti·∫øt ƒë∆°n h√†ng</h3>
              <ul style="list-style: none; padding: 0;">
                <li>üîπ M√£ ƒë∆°n h√†ng: <strong>#${data.orderCode}</strong></li>
                <li>üîπ Th·ªùi gian: <strong>${this.formatDate(data.cancelTime)}</strong></li>
                <li>üîπ L√Ω do: <strong>${data.reason}</strong></li>
              </ul>
            </div>

            <div style="background-color: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="color: #991b1b; margin: 0;">
                B·∫°n c√≥ th·ªÉ th·ª≠ thanh to√°n l·∫°i b·∫±ng c√°ch:
                <ol style="margin-top: 10px;">
                  <li>ƒêƒÉng nh·∫≠p v√†o LearnUp</li>
                  <li>V√†o ph·∫ßn n√¢ng c·∫•p Premium</li>
                  <li>Th·ª±c hi·ªán thanh to√°n m·ªõi</li>
                </ol>
              </p>
            </div>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FE_URL}/premium" 
                 style="background-color: #2563eb; color: white; padding: 12px 24px; 
                        text-decoration: none; border-radius: 6px;">
                N√¢ng c·∫•p Premium
              </a>
            </div>

            <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:</p>
            <ul style="list-style: none; padding: 0;">
              <li>üìß Email: support@learnup.work</li>
              <li>üìû Hotline: 0938982776</li>
            </ul>

            <p style="text-align: center; color: #6b7280;">
              Tr√¢n tr·ªçng,<br>
              <strong>LearnUp Team</strong>
            </p>
          </div>
        </div>
      `
            };
            try {
                yield this.transporter.sendMail(mailOptions);
                console.log('Payment failed email sent');
            }
            catch (error) {
                console.error('Send payment failed email error:', error);
            }
        });
    }
}
exports.EmailService = EmailService;
EmailService.transporter = nodemailer_1.default.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
    }
});
